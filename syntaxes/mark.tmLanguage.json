{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mark",
	"scopeName": "source.mark",
	"patterns": [
		{
			"include": "#value"
		}
	],
	"repository": {
		"array": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.mark"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.mark"
				}
			},
			"name": "meta.structure.array.mark",
			"patterns": [
				{
					"include": "#value"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.mark"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mark"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.mark"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mark"
						}
					},
					"end": "\\*/",
					"name": "comment.block.mark"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.mark"
						}
					},
					"match": "(//).*$\\n?",
					"name": "comment.line.double-slash.mark"
				}
			]
		},
		"constant": {
			"match": "\\b(?:true|false|null|NaN|Infinity)\\b",
			"name": "constant.language.mark"
		},
		"number": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.numeric.mark"
		},
		"string-content": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.mark"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.mark"
				}
			]
		},		
		"double-string": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.mark"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.mark"
				}
			},
			"name": "string.quoted.double.mark",
			"patterns": [
				{
					"include": "#string-content"
				}
			]
		},
		"single-string": {
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.mark"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.mark"
				}
			},
			"name": "string.quoted.single.mark",
			"patterns": [
				{
					"include": "#string-content"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"include": "#double-string"
				},
				{
					"include": "#single-string"
				}
			]
		},
		"identifier": {
			"name": "support.type.property-name.mark",
			"match": "[a-zA-Z$_]([a-zA-Z0-9$_\\-\\.])*"			
		},
		"object-key": {
			"name": "support.type.property-name.mark",
			"patterns": [
				{
					"include": "#identifier"
				},			
				{
					"name": "support.type.property-name.mark",
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.support.type.property-name.begin.mark"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.support.type.property-name.end.mark"
						}
					},
					"patterns": [
						{
							"include": "#string-content"
						}
					]
				},
				{
					"name": "support.type.property-name.mark",
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.support.type.property-name.begin.mark"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.support.type.property-name.end.mark"
						}
					},
					"patterns": [
						{
							"include": "#string-content"
						}
					]
				}
			]
		},
		"json-object": {
			"name": "meta.structure.dictionary.json5",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.begin.json5"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.end.json5"
				}
			},
			"patterns": [
				{
					"include": "#object-key"
				},
				{
					"include": "#comment"
				},
				{
					"name": "meta.structure.dictionary.value.json5",
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.dictionary.key-value.json5"
						}
					},
					"end": "(,)|(?=\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.separator.dictionary.pair.json5"
						}
					},
					"patterns": [
						{
							"include": "#value"
						}
					]
				}
			]			
		},	
		"value": {
			"patterns": [
				{
					"include": "#comments"
				},			
				{
					"include": "#constant"
				},
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#array"
				},
				{
					"include": "#json-object"
				}				
			]
		}
	}
}